data("PupfishHeads")
fit <- lm.rrpp(log(headSize) ~ sex + locality/year, SS.type = "I",
data = PupfishHeads, print.progress = FALSE, iter = 999)
summary(fit)
anova(fit, effect.type = "F") # Maybe not most appropriate
data("PupfishHeads")
anova(fit, effect.type = "F") # Maybe not most appropriate
anova(fit, effect.type = "Rsq") # Change effect type, but still not
anova(fit, effect.type = "F", error = c("Residuals", "locality:year",
"Residuals"))
fit <- lm.rrpp(log(headSize) ~ sex + locality/year, SS.type = "III",
data = PupfishHeads, print.progress = FALSE, iter = 999)
summary(fit)
anova(fit, effect.type = "F", error = c("Residuals", "locality:year",
"Residuals"))
fit <- lm.rrpp(log(headSize) ~ sex + locality/year, SS.type = "I",
data = PupfishHeads, print.progress = FALSE, iter = 999)
anova(fit, effect.type = "F") # Maybe not most appropriate
fit2 <- lm.rrpp(log(headSize) ~ sex + locality/year, SS.type = "III",
data = PupfishHeads, print.progress = FALSE, iter = 999)
anova(fit, effect.type = "F", error = c("Residuals", "locality:year",
"Residuals"))
anova(fit2, effect.type = "F", error = c("Residuals", "locality:year",
"Residuals"))
fit2 <- lm.rrpp(log(headSize) ~ sex + locality/year, SS.type = "II",
data = PupfishHeads, print.progress = FALSE, iter = 999)
anova(fit, effect.type = "F", error = c("Residuals", "locality:year",
"Residuals"))
anova(fit2, effect.type = "F", error = c("Residuals", "locality:year",
"Residuals"))
data(Pupfish)
fit <- lm.rrpp(coords ~ log(CS) + Sex*Pop, SS.type = "I",
data = Pupfish, print.progress = FALSE, iter = 999)
fit2 <- lm.rrpp(coords ~ log(CS) + Sex*Pop, SS.type = "II",
data = Pupfish, print.progress = FALSE, iter = 999)
fit3 <- lm.rrpp(coords ~ log(CS) + Sex*Pop, SS.type = "III",
data = Pupfish, print.progress = FALSE, iter = 999)
anova(fit)
anova(fi2)
anova(fit3)
fit2 <- lm.rrpp(coords ~ log(CS) + Sex*Pop, SS.type = "II",
data = Pupfish, print.progress = FALSE, iter = 999)
fit <- lm.rrpp(coords ~ log(CS) + Sex*Pop, SS.type = "I",
data = Pupfish, print.progress = FALSE, iter = 999)
fit2 <- lm.rrpp(coords ~ log(CS) + Sex*Pop, SS.type = "II",
data = Pupfish, print.progress = FALSE, iter = 999)
fit3 <- lm.rrpp(coords ~ log(CS) + Sex*Pop, SS.type = "III",
data = Pupfish, print.progress = FALSE, iter = 999)
anova(fit)
anova(fi2)
anova(fit2)
anova(fit3)
data(Pupfish)
fit1.p <- lm.rrpp(coords ~ log(CS) + Sex*Pop, SS.type = "I",
data = Pupfish, print.progress = FALSE, iter = 999)
fit2.p <- lm.rrpp(coords ~ log(CS) + Sex*Pop, SS.type = "II",
data = Pupfish, print.progress = FALSE, iter = 999)
fit3.p <- lm.rrpp(coords ~ log(CS) + Sex*Pop, SS.type = "III",
data = Pupfish, print.progress = FALSE, iter = 999)
anova(fit1.p)
anova(fit2.p)
anova(fit3.p)
data(plethodon)
Y.gpa <- gpagen(plethodon$land)    #GPA-alignment
gdf <- geomorph.data.frame(Y.gpa,
site = plethodon$site,
species = plethodon$species) # geomorph data frame
fit1 <- procD.lm(coords ~ species * site, data = gdf, SS.type = "I"))
fit1 <- procD.lm(coords ~ species * site, data = gdf, SS.type = "I")
fit2 <- procD.lm(coords ~ species * site, data = gdf, SS.type = "II")
fit3 <- procD.lm(coords ~ species * site, data = gdf, SS.type = "III")
anova(fit1)
anova(fit2)
fit3 <- procD.lm(coords ~ species * site, data = gdf, SS.type = "III")
anova(fit3)
procD.lm
887556+1037000
install.packages(c("arrow", "bookdown", "brew", "brio", "bslib", "checkmate", "cli", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "deldir", "desc", "deSolve", "dotCall64", "dplyr", "DT", "e1071", "emmeans", "expm", "fansi", "GenSA", "geoR", "gert", "GGally", "ggformula", "ggridges", "gmp", "graphlayouts", "gtools", "haven", "htmltools", "htmlwidgets", "httpuv", "httr2", "igraph", "interp", "jsonlite", "later", "lava", "leaflet", "lifecycle", "lme4", "maps", "markdown", "Matrix", "MatrixModels", "matrixStats", "Morpho", "mosaic", "mosaicCore", "mosaicData", "mvMORPH", "mvtnorm", "ordinal", "phytools", "pkgbuild", "plotrix", "processx", "progress", "R.utils", "ragg", "RcppArmadillo", "RcppEigen", "RCurl", "recipes", "RGCCA", "rgl", "rlang", "Rmpfr", "rprojroot", "rsconnect", "RSQLite", "Rvcg", "s2", "sandwich", "sass", "scales", "segmented", "seqinr", "servr", "sf", "shiny", "shinybusy", "sp", "spacetime", "spatstat.random", "spdep", "stringdist", "stringi", "stringr", "svglite", "tensorA", "terra", "testthat", "tidygraph", "tiff", "timeDate", "tinytex", "ucminf", "units", "vctrs", "vroom", "waldo", "warp", "wk", "XML", "xml2", "yaml", "yulab.utils"))
install.packages(c("arrow", "bookdown", "brew", "brio", "bslib", "checkmate", "cli", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "deldir", "desc", "deSolve", "dotCall64", "dplyr", "DT", "e1071", "emmeans", "expm", "fansi", "GenSA", "geoR", "gert", "GGally", "ggformula", "ggridges", "gmp", "graphlayouts", "gtools", "haven", "htmltools", "htmlwidgets", "httpuv", "httr2", "igraph", "interp", "jsonlite", "later", "lava", "leaflet", "lifecycle", "lme4", "maps", "markdown", "Matrix", "MatrixModels", "matrixStats", "Morpho", "mosaic", "mosaicCore", "mosaicData", "mvMORPH", "mvtnorm", "ordinal", "phytools", "pkgbuild", "plotrix", "processx", "progress", "R.utils", "ragg", "RcppArmadillo", "RcppEigen", "RCurl", "recipes", "RGCCA", "rgl", "rlang", "Rmpfr", "rprojroot", "rsconnect", "RSQLite", "Rvcg", "s2", "sandwich", "sass", "scales", "segmented", "seqinr", "servr", "sf", "shiny", "shinybusy", "sp", "spacetime", "spatstat.random", "spdep", "stringdist", "stringi", "stringr", "svglite", "tensorA", "terra", "testthat", "tidygraph", "tiff", "timeDate", "tinytex", "ucminf", "units", "vctrs", "vroom", "waldo", "warp", "wk", "XML", "xml2", "yaml", "yulab.utils"))
devtools::install_github('geomorphR/geomorph', ref = "Stable")
library(geomorph)
readland.tps
.readland.tps
devtools::install_github("geomorphR/geomorph", ref = "Develop")
devtools::install_github('geomorphR/geomorph', ref = "Stable")
devtools::install_github('geomorphR/geomorph', ref = "Develop")
library(geomorph)
new <- readland.tps('Adams2004JordTeyData.tps')
devtools::install_github('geomorphR/geomorph', ref = "Develop")
devtools::install_github('geomorphR/geomorph', ref = "Develop", build_vignettes = TRUE)
876309+1023707
library(geomorph)
?procD.pgls
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)    #GPA-alignment
gdf <- geomorph.data.frame(Y.gpa, phy = plethspecies$phy)
pleth.pgls <- procD.pgls(coords ~ Csize, phy = phy, data = gdf,
iter = 999)
gdf$phy
install.packages(c("BH", "castor", "DBI", "digest", "diversitree", "expm", "FNN", "future", "future.apply", "ggrepel", "glue", "leaflegend", "magick", "Matrix", "meta", "patchwork", "phytools", "Rcpp", "RCurl", "readr", "reprex", "rlang", "roxygen2", "rticles", "shinyWidgets", "yulab.utils"))
install.packages("phytools")
library(geomorph)
?gpagen
?rnorm_pre
faux
library(faux)
?rnorm_pre
rnorm_pre
# CH 4/5: simulated group data
library(RRPP)
#CH 4 parts (up to anova)
set.seed(21)
y <- c(rnorm(10, mean = 0.9, sd = 0.2),
rnorm(10, mean = 0.5, sd = 0.2))
group1 <- factor(c(rep("Mexico", 10), rep("USA", 10)),
levels = c("Mexico", "USA"))
group2 <- factor(c(rep("Mexico", 10), rep("AZ-NM", 5),
rep("NM", 5)),
levels = c("Mexico", "AZ-NM", "NM"))
df <- data.frame(y = y, group1 = group1, group2 = group2)
par(mfrow = c(1, 2)) # make a two-panel canvas, by row
stripchart(y ~ group1, pch = 19, data = df, vertical = TRUE)
stripchart(y ~ group2, pch = 19, data = df, vertical = TRUE)
par(mfrow = c(1, 1)) # Reset the canvas
X0 <- matrix(rep(1, 20))
X1 <- cbind(X0, c(rep(0, 10), rep(1, 10))) # Builds on X0
X2 <- cbind(X0, c(rep(0, 10), rep(1, 5), rep(0, 5)),
c(rep(0, 15), rep(1, 5)))
X0 <- model.matrix(y ~ 1, data = df)
X1 <- model.matrix(y ~ group1, data = df)
X2 <- model.matrix(y ~ group2, data = df)
b0 <- solve(crossprod(X0)) %*% crossprod(X0, y)
b1 <- solve(crossprod(X1)) %*% crossprod(X1, y)
b2 <- solve(crossprod(X2)) %*% crossprod(X2, y)
crossprod(X2[1,], b2)
crossprod(X2[20,], b2)
yhat0 <- X0 %*% b0
yhat1 <- X1 %*% b1
yhat2 <- X2 %*% b2
mean(y)
by(y, group1, mean)
by(y, group2, mean)
#Resids
e0 <- y - yhat0
e1 <- y - yhat1
e2 <- y - yhat2
#Summary stats
RSS0 <- crossprod(e0)
RSS1 <- crossprod(e1)
RSS2 <- crossprod(e2)
SS1 <- RSS0 - RSS1
SS2 <- RSS0 - RSS2
Rsq1 <- SS1 / RSS0
Rsq2 <- SS2 / RSS0
df1 <- ncol(X1) - ncol(X0)
df2 <- ncol(X2) - ncol(X0)
MS1 <- SS1 / df1
MS2 <- SS2 / df2
dfr1 <- nrow(X1) - ncol(X1)
dfr2 <- nrow(X2) - ncol(X2)
MSE1 <- RSS1 / dfr1
MSE2 <- RSS2 / dfr2
F1 <- MS1 / MSE1
F2 <- MS2 / MSE2
### lm and lm.rrpp
fit0 <- lm(y~ 1, data = df)
fit1 <- lm(y~ group1, data = df)
fit2 <- lm(y~ group2, data = df)
coef(fit0)
coef(fit1)
coef(fit2)
fitted(fit0)
fitted(fit1)
fitted(fit2)
resid(fit0)
resid(fit1)
resid(fit2)
summary(fit0)
summary(fit1)
summary(fit2)
MSE <- anova(fit2)[2,3]
std.err <- sqrt(diag(MSE*solve(crossprod(X2))))  #sqrt(MSE*(X^tX)^-1)
std.err
anova(fit1)
anova(fit2)
### Ch 5: ANOVA
boxplot(y ~ group2, data = df,
col = "gray", ylim = c(0,1.4))
stripchart(y ~ group2, data = df,
pch = 19, col = c(1,2,4), vertical = TRUE,
add = TRUE)
fit1 <- lm.rrpp(y ~ group2,
data = df,
iter = 9,
print.progress = FALSE)
anova(fit1)
fit2 <- lm.rrpp(y ~ group2,
data = df,
iter = 99,
print.progress = FALSE)
anova(fit2)
fit3 <- lm.rrpp(y ~ group2,
data = df,
iter = 999,
print.progress = FALSE)
anova(fit3)
fit4 <- lm.rrpp(y ~ group2,
data = df,
iter = 9999,
verbose = TRUE,
print.progress = FALSE)
summary(fit4)
anova(fit4)$table
####
densF <- density(fit4$ANOVA$Fs)
F.theory <- df(density(fit4$ANOVA$Fs)$x, 2, 19)
hist(fit4$ANOVA$Fs, freq = FALSE, breaks = 100, xlab = "F",
ylab = "Probability", main = "")
points(densF$x, F.theory, type = "l", lwd = 2, col = "red")
arrows(fit4$ANOVA$Fs[1], 0.4, fit4$ANOVA$Fs[1], 0.01, lwd=2,length = .1)
text("F.obs",x = fit4$ANOVA$Fs[1], y = 0.5)
PW <- pairwise(fit4, groups = group2)
PW.summary <- summary(PW, test.type = "dist",stat.table = TRUE)
PW.summary
#####################
#std error via permutation
coef.rand <- fit4$LM$random.coef[[1]]
cr <- sapply(coef.rand, as.vector)
apply(cr,1,sd)
SE <- MSE * diag(solve(crossprod(X2)))
std.err
apply(cr,1,sd) / std.err  #not the same
# Mike's attempt
coef.rand <- fit4$LM$random.coef[[1]]
cr <- sapply(coef.rand, as.vector)
crr <- cr - apply(cr, 1, mean) # random coefficient residuals
N <- ncol(cr)
Xd <- colSums(X2) # same as diag(crosspord(X2))
# weighted MSE
dfr <- summary(fit2)$df[2]
MSE <- rowSums(crr^2) * Xd / dfr
MSE
# SE
sqrt(MSE / N)
###################### parametric
# anova
anova(fit4)
###################### parametric
# anova
fit.lm <- lm(y ~ group2, data = df)
anova(fit4)
anova(fit.lm)
coef(fit4)
coef(fit.lm)
summary(fit.lm)
coef(fit4,test = TRUE)
anova(fit4)
anova(fit.lm)
PW.summary
pairwise.t.test(df$y, df$group2)
cbind(coef(fit.lm), coef(fit4))
data.frame(coef(fit.lm), coef(fit4))
coef.tbl <- data.frame(coef(fit.lm), coef(fit4))
coef.tbl
param.aov <- anova(fit.lm)$table
param.aov
anova(fit.lm)
anova(fit.lm) -> test
test
dim(test)
param.aov <- anova(fit.lm)
RRPP.aov <- anova(fit4)$table
param.aov <- anova(fit.lm)
param.aov
RRPP.aov
rbind(param.aov, RRPP.aov)
summary(fit.lm)
coef(fit4,test = TRUE)
knitr::kable(param.aov, format="markdown", booktabs = TRUE,
caption = "ANOVA table obtained from parametric methods.")
anova(fit.lm)
#p values similar
anova(fit4)
#similar
PW.summary
pairwise.t.test(df$y, df$group2)
summary(PW, test.type = "dist",stat.table = FALSE)
#similar
PW.summary
pairwise.t.test(df$y, df$group2,)
?pairwise.t.test
PW.param <- pairwise.t.test(df$y, df$group2,)
as.vector(PW.param)
PW.param$p.value
as.vector(PW.param$p.value)
as.vector(PW.param$p.value)[-3]
#similar
PW.summary
cbind(PW.summary[,c(1,3,4)], as.vector(PW.param$p.value)[-3])
as.vector(PW.param$p.value)[-3]
t(as.vector(PW.param$p.value)[-3])
matrix(PW.param$p.value)[-3])
matrix(PW.param$p.value)[-3]
cbind(PW.summary[,c(1,3,4)], ,atrox(PW.param$p.value)[-3])
cbind(PW.summary[,c(1,3,4)], matrix(PW.param$p.value)[-3])
data.frame(PW.summary[,c(1,3,4)], matrix(PW.param$p.value)[-3])
PW.summary[,-2]
PW.summary[,-2]
PW.summary
PW.summary$summary.table
PW.summary$summary.table[,-2]
data.frame(PW.summary$summary.table[,-2], matrix(PW.param$p.value)[-3])
PW.tbl <- data.frame(PW.summary$summary.table[,-2], matrix(PW.param$p.value)[-3])
PW.tbl
library(geomorph)
?procD.lm
library(geomorph)
data(plethodon)
?coords.subset
group <- factor(paste(plethodon$species, plethodon$site))
new.coords <- coords.subset(A = plethodon$land, group = Group)
names(new.coords) # see the list levels
new.coords <- coords.subset(A = plethodon$land, group = group)
names(new.coords) # see the list levels
new.coords
library(geomorph)
data(plethodon)
Y.gpa <- gpagen(plethodon$land)
Y.gpa
Y.gpa$coords
library(geomorph)
data(plethodon)
Y.gpa <- gpagen(plethodon$land)
fit <- procD.lm(Y.gpa$coords ~ plethodon$species*plethodon$site)
groups <- factor(paste(plethodon$species, plethodon$site)
PW <- pairwise(fit,groups = groups)
groups <- factor(paste(plethodon$species, plethodon$site)
)
fit <- procD.lm(Y.gpa$coords ~ plethodon$species*plethodon$site)
PW <- pairwise(fit,groups = groups)
PW$LS.means
library(RRPP)
?lm.rrpp
nsims <- 100
n <- 100
gp <- gl(2,50)
gp
y <- rnorm(n)
anova(y~gp)
anova(lm(y~gp))
out <- lapply(1:nsims, function(j){
y <- rnorm(n)
anova(lm(y~gp))
})
out[[1]]
out[[2]]
out[[3]]
anova(lm(y~gp))$table
y <- rnorm(n)
anova(lm(y~gp))$table
anova(lm(y~gp))$Table
anova(lm(y~gp)) -> test
test$`F value`
nsims <- 1000
n <- 100
gp <- gl(2,50)
out <- unlist(lapply(1:nsims, function(j){
y <- rnorm(n)
anova(lm(y~gp))$$`F value`[1]
out <- unlist(lapply(1:nsims, function(j){
y <- rnorm(n)
anova(lm(y~gp))$`F value`[1]
}))
hist(out)
mean(out)
range(out)
library(geomorph)
data(lizards)
gdf <- geomorph.data.frame(shape = lizards$coords, ind = lizards$ind, replicate = lizards$rep)
liz.sym <- bilat.symmetry(A = shape, ind = ind, rep = rep, object.sym = TRUE, land.pairs = lizards$lm.pairs, data = gdf, RRPP = TRUE, iter = 149)
liz.sym.noRRPP <- bilat.symmetry(A = shape, ind = ind, rep = rep, object.sym = T, land.pairs = lizards$lm.pairs, data = gdf, RRPP = F, iter = 149)
liz.sym <- bilat.symmetry(A = shape, ind = ind, rep = rep, object.sym = TRUE, land.pairs = lizards$lm.pairs, data = gdf, RRPP = TRUE)
liz.sym.noRRPP <- bilat.symmetry(A = shape, ind = ind, rep = rep, object.sym = T, land.pairs = lizards$lm.pairs, data = gdf, RRPP = F)
summary(liz.sym)
summary (liz.sym.noRRPP)
install.packages(c("castor", "coda", "commonmark", "cowplot", "data.table", "DBI", "digest", "diversitree", "emmeans", "expm", "FNN", "future", "future.apply", "GenSA", "geometries", "ggfun", "ggrepel", "ggridges", "glue", "gmp", "gplots", "graphlayouts", "hardhat", "httpuv", "igraph", "interp", "kableExtra", "leaflegend", "listenv", "magick", "Matrix", "meta", "patchwork", "phylobase", "pkgload", "plotly", "ps", "pscl", "R.oo", "Rcpp", "RCurl", "readr", "reprex", "rlang", "Rmpfr", "roxygen2", "RRPP", "rsconnect", "RSQLite", "rticles", "segmented", "sfheaders", "shinyWidgets", "sp", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "terra", "tidygraph", "tidyr", "timechange", "uuid", "viridis", "withr", "XML", "xts", "yulab.utils", "zip"))
devtools::install_github("mlcollyer/RRPP,ref = "develop")
devtools::install_github("mlcollyer/RRPP", ref = "develop")
devtools::install_github('mlcollyer/RRPP', ref = "develop")
geomorph:::compare.pls
?geomorph:::compare.pls
devtools::install_github('mlcollyer/RRPP', ref = "develo")
devtools::install_github('mlcollyer/RRPP', ref = "develop")
seq(1:9)
rep(seq(1:9),3)
mydat <- matrix(rep(seq(1:9),3),ncol=3)
mydat
mydat <- matrix(rep(seq(1:9),5),ncol=3)
arrayspecs(mydat,p = 3,k = 3)
library(geomorph)
mydat <- matrix(rep(seq(1:9),5),ncol=3)
mydat
arrayspecs(mydat,p = 3,k = 3)
mydat <- matrix(rep(seq(1:9),5),byrow = T, ncol=3)
mydat
mydat
arrayspecs(mydat,p = 3,k = 3)
mydat
mydat
?arrayspecs
setwd("C:/DeanData/Teaching/Biol-465-EEOB 565-Macroevolution/MacroevolutionPracticals")
a <- 3
#Assign a value to a variable
a <- 3
#Assign a value to a variable
a <- 3
a
b = 4
b
5 -> c
c
#Combine values into a vector (i.e., array) using the `c` function
b <- c(3,4,5)
b
b[2]
b[1]
b[1:2]
b[c(1,3)]
#Combine objects into a list using the `list` function
l <- list(number = 3, values = c(3.5, 4, 12), message = "many things can go in a list")
l
l[[3]]
l[[1]]
l$message\
l$message
# Generate random deviates
x <- runif(1)
x
# Generate random deviates
x <- runif(1)
x
?runif
runif(n = 100,min = -3,max = 3)
hist(runif(n = 1000,min = -3,max = 3))
hist(runif(n = 1000,min = -3,max = 3))
hist(runif(n = 1000,min = -3,max = 3))
hist(runif(n = 1000,min = -3,max = 3))
hist(runif(n = 10000,min = -3,max = 3))
mydata <- runif(n = 10000,min = -3,max = 3)
hist(mydata)
mean(runif(n = 100,min = -3,max = 3))
mean(runif(n = 100,min = -3,max = 3))^{2/3}
a <- rnorm(50,5,1)
plot(a)
hist(a)
a <- rnorm(5000,5,1)
plot(a)
hist(a)
# some built-in summary functions
mean(a)
median(a)
var(a)
#install and load packages
#install.packages("ape")
library(ape)
### The tree object
tree <- rcoal(5)
tree
class(tree)
names(tree)
tree$edge
tree$edge[1,]
tree$edge[1]
class(tree$edge)
tree$edge[,1]
tree$edge[1,1]
tree$edge.length
tree$tip.label
### Plotting trees
plot(tree)
plot(tree, edge.color = rainbow(8))
par(mfrow=c(1,2))
plot(tree, type = "cladogram")
plot(tree, type = "radial")
par(mfrow=c(1,1))
par(mfrow=c(2,1))
plot(tree, type = "cladogram")
plot(tree, type = "radial")
par(mfrow=c(1,1))
par(mfrow=c(2,1))
plot(tree, type = "cladogram")
plot(tree, type = "radial")
par(mfrow=c(1,1))
#Most recent common ancestor
getMRCA(tree, c("t1", "t3"))
par(mfrow=c(2,1))
plot(tree, type = "cladogram")
plot(tree, type = "radial")
par(mfrow=c(1,1))
#Most recent common ancestor
getMRCA(tree, c("t1", "t3"))
#node depth
node.depth.edgelength(tree)
depths <- node.depth.edgelength(tree)
max(depths) - depths
plot(tree)
nodlabels()
nodlabel()
nodelabel()
nodelabels()
tiplabels()
tree$edge
