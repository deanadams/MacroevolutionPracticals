anc.cont.ML$ace   #with phytools: the same estimates
anc.cont.ML2$ace  #with APE
anc.cont.ML$ace   #with phytools: the same estimates
anc.cont.gls<-ace(x=cont_data_vect,phy=tree, corStruct = corBrownian(1, tree), method="GLS")  #same as ML  (see Schluter et al. 1997)
anc.cont.gls$ace   #GLS: SCP. the same
cbind(anc.cont.ML2$ace,anc.cont.gls$ace)
cbind(anc.cont.ML2$ace,anc.cont.gls$ace,anc.cont.ML)
cbind(anc.cont.ML2$ace,anc.cont.gls$ace,anc.cont.ML$ace)
## ---- known_nodes ----
tree<-pbtree(n=100,scale=1)
## simulate data with a trend
x<-fastBM(tree,internal=TRUE,mu=3)
phenogram(tree,x,ftype="off")
x.tip<-x[match(tree$tip.label,names(x))]
phenogram(tree,x.tip)  #traitgram under BM with no ancestral information
#estimate with no prior
a<-x[as.character(1:tree$Nnode+Ntip(tree))]
x<-x[tree$tip.label]
## let's see how bad we do if we ignore the trend
plot(a,fastAnc(tree,x),xlab="true values",
ylab="estimated states under BM")
lines(range(c(x,a)),range(c(x,a)),lty="dashed",col="red")
title("estimated without prior information")
## incorporate prior knowledge
pm<-setNames(c(1000,rep(0,tree$Nnode)),
c("sig2",1:tree$Nnode+length(tree$tip.label)))
## the root & two randomly chosen nodes
nn<-as.character(c(length(tree$tip.label)+1,
sample(2:tree$Nnode+length(tree$tip.label),2)))
pm[nn]<-a[as.character(nn)]
## prior variance
pv<-setNames(c(1000^2,rep(1000,length(pm)-1)),names(pm))
pv[as.character(nn)]<-1e-100
## run MCMC
mcmc<-anc.Bayes(tree,x,ngen=100000,
control=list(pr.mean=pm,pr.var=pv,
a=pm[as.character(length(tree$tip.label)+1)],
y=pm[as.character(2:tree$Nnode+length(tree$tip.label))]))
anc.est<-colMeans(mcmc$mcmc[201:1001,as.character(1:tree$Nnode+length(tree$tip.label))])
plot(a,anc.est,xlab="true values",
ylab="estimated states using informative prior")
lines(range(c(x,a)),range(c(x,a)),lty="dashed",col="red")
title("estimated using informative prior")
#using 'ace' function in APE
anc.cont.ML2<-ace(x=cont_data$svl,phy=tree, type="continuous", method="ML")
anc.cont.ML2$ace  #with APE
#anc.cont.ML #This would show us the estimate and 95% CI for each internal node
anc.cont.ML$ace  #ancestral estimates
cont_data_vect
cont_data$svl
anc.cont.ML<-fastAnc(tree,cont_data_vect,vars=TRUE,CI=TRUE)
rm(list = ls())
#Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
cont_data
## -----anc_est_cont-----
anc.cont.ML<-fastAnc(tree,cont_data,vars=TRUE,CI=TRUE)
matrix(cont_data)
matrix(cont_data[,1])
cont_data_vect<-setNames(cont_data$svl,rownames(cont_data)) ##contMap needs a named vector for the data.
cont_data_vect
length(cont_data_vect)
## -----anc_est_cont-----
anc.cont.ML<-fastAnc(tree,cont_data_vect,vars=TRUE,CI=TRUE)
#anc.cont.ML #This would show us the estimate and 95% CI for each internal node
anc.cont.ML$ace  #ancestral estimates
#PLOT as color map
cont_data_vect<-setNames(cont_data$svl,rownames(cont_data)) ##contMap needs a named vector for the data.
tree.col<-contMap(tree,cont_data_vect,plot=FALSE)  #runs Anc. St. Est. on branches of tree
plot(tree.col,type="fan")
#using 'ace' function in APE
anc.cont.ML2<-ace(x=cont_data_vect,phy=tree, type="continuous", method="ML")
anc.cont.ML2$ace  #with APE
anc.cont.ML$ace   #with phytools: the same estimates
library(phytools)
library(geiger)
######Discrete Anc. State Estimation
## Read data & tree
tree<-read.tree("../data/anole.gp.tre",tree.names=T)
group<-read.csv('../data/anole.gp.csv', row.names=1)
gp<-as.factor(t(group)); names(gp)<-row.names(group)
#Plot
plot(tree,type="fan")
cols<-setNames(palette()[1:length(unique(gp))],sort(unique(gp)))
tiplabels(pie=model.matrix(~gp-1),piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
library(castor)
gp.int<-as.numeric(gp); names(gp.int)<-names(gp)
anc.mp <- asr_max_parsimony(tree,gp.int)
#Plot
plot(tree, type="fan")
cols<-setNames(palette()[1:length(unique(gp.int))],sort(unique(gp.int)))
tiplabels(pie=model.matrix(~as.factor(gp.int)-1),piecol=cols,cex=0.3)
nodelabels(node=1:tree$Nnode+Ntip(tree),
pie=anc.mp$ancestral_likelihoods,piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
library(corHMM)
##Create the model for trait evolution
group_formatted<-cbind(row.names(group),group[,1]) ##put the data in a specific format because the function is picky
group_model_er <- getStateMat4Dat(group_formatted,"ER")  #equal transition rates
plotMKmodel(group_model_er$rate.mat,rate.cat = 1)
##Create the model for trait evolution
group_formatted<-cbind(row.names(group),group[,1]) ##put the data in a specific format because the function is picky
group_model_er <- getStateMat4Dat(group_formatted,"ER")  #equal transition rates
plotMKmodel(group_model_er$rate.mat,rate.cat = 1)
##Perform ancestral character estimation
anc.ML<-ace(x = group$x, phy = tree,
type = "discrete", method = 'ML',
model = group_model_er$rate.mat)
anc.ML ## we can see a lot of information just by calling our object
## We can see the probability of each state here, just the first few internal nodes will be shown
round(head(anc.ML$lik.anc),3)
# We can plot the ancestral character estimates with the nodelabels() function
colorkey <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2") ##A colorblind friendly color palette
names(colorkey) <- colnames(anc.ML$lik.anc) ##assign each character state a color
tip_cols<-colorkey[as.character(group$x)] ##putting the trait values in as.character() is important!
plot(tree,type="fan")
nodelabels(pie=anc.ML$lik.anc,piecol=colorkey,cex=0.5)
tiplabels(pch=19,col=tip_cols)
legend(x='bottomleft',legend = names(colorkey),fill=colorkey)
## ---- simmap ----
# simulate single stochastic character map using empirical Bayes method
gp<-setNames(group$x,rownames(group)) ##make.simmap needs a named vector for the data.
tree.smp1<-make.simmap(tree,gp,model=group_model_er$rate.mat)
plot(tree.smp1,colorkey,type="fan")  #one run.  Not overly useful.
#Must do many times
tree.smp<-make.simmap(tree,gp,model=group_model_er$rate.mat,nsim=100)
anc.smp<-summary(tree.smp,plot=FALSE)
plot(anc.smp, type="fan", fsize=0.8,ftype="i")
rm(list = ls())
#Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
cont_data_vect<-setNames(cont_data$svl,rownames(cont_data)) ##contMap needs a named vector for the data.
## -----anc_est_cont-----
anc.cont.ML<-fastAnc(tree,cont_data_vect,vars=TRUE,CI=TRUE)
#anc.cont.ML #This would show us the estimate and 95% CI for each internal node
anc.cont.ML$ace  #ancestral estimates
#PLOT as color map
tree.col<-contMap(tree,cont_data_vect,plot=FALSE)  #runs Anc. St. Est. on branches of tree
plot(tree.col,type="fan")
#using 'ace' function in APE
anc.cont.ML2<-ace(x=cont_data_vect,phy=tree, type="continuous", method="ML")
anc.cont.ML2$ace  #with APE
anc.cont.ML$ace   #with phytools: the same estimates
anc.cont.gls<-ace(x=cont_data_vect,phy=tree, corStruct = corBrownian(1, tree), method="GLS")  #same as ML  (see Schluter et al. 1997)
anc.cont.gls$ace   #GLS: SCP. the same
rm(list = ls())
## ---- known_nodes ----
tree<-pbtree(n=100,scale=1)
## simulate data with a trend
x<-fastBM(tree,internal=TRUE,mu=3)
phenogram(tree,x,ftype="off")
x.tip<-x[match(tree$tip.label,names(x))]
phenogram(tree,x.tip)  #traitgram under BM with no ancestral information
#estimate with no prior
a<-x[as.character(1:tree$Nnode+Ntip(tree))]
x<-x[tree$tip.label]
## let's see how bad we do if we ignore the trend
plot(a,fastAnc(tree,x),xlab="true values",
ylab="estimated states under BM")
lines(range(c(x,a)),range(c(x,a)),lty="dashed",col="red")
title("estimated without prior information")
## incorporate prior knowledge
pm<-setNames(c(1000,rep(0,tree$Nnode)),
c("sig2",1:tree$Nnode+length(tree$tip.label)))
## the root & two randomly chosen nodes
nn<-as.character(c(length(tree$tip.label)+1,
sample(2:tree$Nnode+length(tree$tip.label),2)))
pm[nn]<-a[as.character(nn)]
## prior variance
pv<-setNames(c(1000^2,rep(1000,length(pm)-1)),names(pm))
pv[as.character(nn)]<-1e-100
## run MCMC
mcmc<-anc.Bayes(tree,x,ngen=100000,
control=list(pr.mean=pm,pr.var=pv,
a=pm[as.character(length(tree$tip.label)+1)],
y=pm[as.character(2:tree$Nnode+length(tree$tip.label))]))
anc.est<-colMeans(mcmc$mcmc[201:1001,as.character(1:tree$Nnode+length(tree$tip.label))])
plot(a,anc.est,xlab="true values",
ylab="estimated states using informative prior")
lines(range(c(x,a)),range(c(x,a)),lty="dashed",col="red")
title("estimated using informative prior")
#Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
cont_data_vect<-setNames(cont_data$svl,rownames(cont_data)) ##contMap needs a named vector for the data.
cont_data
SVL<-read.csv('../data/anole.svl.csv', row.names=1)
#Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
SVL<-read.csv('../data/anole.svl.csv', row.names=1)
phylosig(tree,SVL, method = "K")
dim(SVL)
SVL
tree$tip.label
phylosig(tree,SVL)
tree$edge.length
#Read Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
SVL<-read.csv('../data/anole.svl.csv', row.names=1)
geomorph:::physignal(SVL, tree)
geomorph:::physignal.z(SVL, tree)
#Read Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
#Read Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
setwd("C:/DeanData/Teaching/Biol-465-EEOB 565-Macroevolution/MacroevolutionPracticals/08-Ancestral_States_PhySignal/scripts")
#Read Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
SVL<-read.csv('../data/anole.svl.csv', row.names=1)
SVL$svl
SVL<-setNames(SVL$svl,rownames(SVL)) ##contMap needs a named vector for the data.
SVL
# Run phylogenetic signal
phylosig(tree,SVL)
geomorph:::physignal(SVL, tree)
physignal(SVL, tree)
library(geomorph)
physignal(SVL, tree) # same in geomorph
# Run phylogenetic signal
phylosig(tree,SVL,test = "K")
?phylosig
# Run phylogenetic signal
phylosig(tree,SVL,method = "K", test = TRUE)
physignal(SVL, tree) # same in geomorph
geomorph:::physignal.z(SVL, tree)
# Run phylogenetic signal
phylosig(tree,SVL,method = "lambda", test = TRUE)
setwd("C:/DeanData/Teaching/Biol-465-EEOB 565-Macroevolution/Josh-Additional-PracticalMaterials/09-Phylo_Assoc_Discrete/scripts")
## ----read_data----
library(geiger, warn.conflicts=F, quietly=T)
library(phytools, warn.conflicts=F, quietly=T)
library(corHMM, warn.conflicts=F, quietly=T)
tree<-read.tree("../data/tree.64.tre",tree.names=T)
mydata<-read.csv('../data/DiscreteData.csv', stringsAsFactors = TRUE, row.names=1, header=TRUE)
head(mydata) ##Head can be used to show the first few rows of a data frame
mydata$V1
mydata<-read.csv('../data/DiscreteData.csv', row.names=1, header=TRUE)
plotTree.datamatrix
data <- mydata[,1:2]
data
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
data <- mydata[,1:2]; data[,1] <- as.factor(data[,1]); data[,2] <- as.factor(data[,2])
data
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
data <- mydata[,c(1,3)]; data[,1] <- as.factor(data[,1]); data[,2] <- as.factor(data[,2])
data
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
leg <- legend(x = leg$rect$left + 4.7, y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
leg <- legend(x = "topright", names(object$colors$V1),
cex = 0.7, pch = 22, pt.bg = object$colors$V1,
pt.cex = 1.5, bty = "n", title = "V1")
leg <- legend(x = leg$rect$left + 4.7, y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
leg <- legend(x = "topright", names(object$colors$V1),
cex = 0.7, pch = 22, pt.bg = object$colors$V1,
pt.cex = 1.5, bty = "n", title = "V1")
leg <- legend(x = leg$rect$left + 2.7, y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
leg <- legend(x = leg$rect$left, y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
leg <- legend(x = "topright", y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
leg$rect$left
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
leg <- legend(x = "topright"-2, names(object$colors$V1),
cex = 0.7, pch = 22, pt.bg = object$colors$V1,
pt.cex = 1.5, bty = "n", title = "V1")
leg <- legend(x = "topright", names(object$colors$V1),
cex = 0.7, pch = 22, pt.bg = object$colors$V1,
pt.cex = 1.5, bty = "n", title = "V1")
dev.off()
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
leg <- legend(x = "topright", names(object$colors$V1),
cex = 0.7, pch = 22, pt.bg = object$colors$V1,
pt.cex = 1.5, bty = "n", title = "V1")
leg <- legend(x = leg$rect$left+ 4.7, y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
leg$rect$top
leg$rect$h
## ----read_data----
library(geiger, warn.conflicts=F, quietly=T)
library(phytools, warn.conflicts=F, quietly=T)
library(corHMM, warn.conflicts=F, quietly=T)
tree<-read.tree("../data/tree.64.tre",tree.names=T)
mydata<-read.csv('../data/DiscreteData.csv', row.names=1, header=TRUE)
head(mydata) ##Head can be used to show the first few rows of a data frame
#Match data with tree
data.pruned<-treedata(phy=tree,data = mydata, warnings=FALSE)
tree<-data.pruned$phy
mydata<-data.pruned$data
## NOTE: see `plotTree.datamatrix` in phytools for other plotting option
plot.phylo(tree,show.tip.label = F) ## setting show.tip.label = F prevents the species names from appearing
## We make a colour key to denote which state gets which color
colorkey1 <- c('red','black') ##trait V1
colorkey2 <- c('green','orange') ##trait V3
names(colorkey1) <-c(0,1) ##Here we are saying that 0s get red and 1s get black
names(colorkey2) <-c(0,1) ##Here we are saying that 0s get green and 1s get orange
V1cols<-colorkey1[as.character(mydata[,1])] ##putting the trait values in as.character() is important!
V3cols<-colorkey2[as.character(mydata[,3])]
tiplabels(pch = 17,col = V1cols,cex=0.6)
tiplabels(pch = 19,col = V3cols,offset = 0.2,cex=0.6)
plot.phylo(tree,show.tip.label = F)
tiplabels(pch = 17,col = V1cols)
#Set up data. corHMM is picky about how it wants the data formatted
trt1<-cbind(row.names(mydata),mydata[,1])
#Set up initial rate matrices
trait1_model_er <- getStateMat4Dat(trt1,"ER")  #equal transition rates
trait1_model_ard <- getStateMat4Dat(trt1,"ARD")  #All rates different
## ----single_trait_plot
trait1_model_er
trait1_model_ard
plotMKmodel(trait1_model_er$rate.mat,rate.cat = 1)
plotMKmodel(trait1_model_ard$rate.mat,rate.cat = 1)
#Fit models: TRAIT 1
trait1_fit_er <-corHMM(phy = tree, data = trt1, rate.cat = 1, rate.mat = trait1_model_er$rate.mat)
trait1_fit_ard <-corHMM(phy = tree, data = trt1, rate.cat = 1, rate.mat = trait1_model_ard$rate.mat)
##The estimated rates
trait1_fit_er$solution
trait1_fit_ard$solution
#compare models: logL and AIC
trait1_fit_er$loglik
trait1_fit_ard$loglik
##We can formally perform a likelihood ratio test of nested models by doing the following
summary_stat <- -2 * (trait1_fit_er$loglik - trait1_fit_ard$loglik) ## -2 * (model_constrained - model_full)
##This is our p-value
pchisq(summary_stat,df = 1,lower.tail=FALSE ) ##degrees of freedom is the difference in the number of parameters between the two models. In our case 2-1=1
trait1_fit_er$AIC
trait1_fit_ard$AIC
##first plot the data
V1cols<-colorkey1[as.character(mydata[,1])] ##putting the trait values in as.character() is important!
V2cols<-colorkey2[as.character(mydata[,2])]
plot(tree,show.tip.label = F)
tiplabels(pch = 17,col = V1cols)
tiplabels(pch = 19,col = V2cols,offset = 0.2)
##we set up the same format of data frame as before but now we include two traits: trait 1 and trait 2
trtset12<-cbind(row.names(mydata),mydata[,1:2])
trait12_model_er <- getStateMat4Dat(trtset12,"ER")  #equal transition rates
trait12_model_ard <- getStateMat4Dat(trtset12,"ARD")  #All rates different
trait12_model_er
trait12_model_ard
##coax the full transition matrix by having a data frame with all trait combinations
## First get all the unique states for the traits in question
states1<-unique(mydata[,1])
states2<-unique(mydata[,2])
traits12_expanded<-expand.grid('species',states1,states2) ##Having some string at the beginning is important! Our data needs the first column to be populated with names, this achieves that
##try making matrices again
trait12_model_er <- getStateMat4Dat(traits12_expanded,"ER")  #equal transition rates
trait12_model_ard <- getStateMat4Dat(traits12_expanded,"ARD")  #All rates different
traits12_expanded
##try making matrices again
trait12_model_er <- getStateMat4Dat(traits12_expanded,"ER")  #equal transition rates
trait12_model_ard <- getStateMat4Dat(traits12_expanded,"ARD")  #All rates different
##The full transition matrix. Hot dog!
trait12_model_er
trait12_model_ard
plotMKmodel(trait12_model_er$rate.mat,rate.cat = 1)
plotMKmodel(trait12_model_ard$rate.mat,rate.cat = 1)
## ----two_trait_pagel-----
tr1<-mydata[,1]; names(tr1)<-row.names(mydata)
tr2<-mydata[,2]; names(tr2)<-row.names(mydata)
pagel_fit <- fitPagel(tree,x=tr1,y=tr2)
pagel_fit
## ---- x_dep_y_fit ----
fitPagel(tree,x=tr1,y=tr2,dep.var = "x")
## ---- y_dep_x_fit ----
fitPagel(tree,x=tr1,y=tr2,dep.var = "y")
trait_model_er <- getStateMat4Dat(traits12_expanded,"ER")  #Transition matrix with equal transition rates for to two binary traits
##We will use the ER transition matrix as a starting point for our directional model
trait_model_dir<-trait_model_er
##Give some of the transitions their own rate
trait_model_dir$rate.mat[1,2]<-2
trait_model_dir$rate.mat[3,4]<-3
trait_model_dir
#Two trait analysis: Order to transitions matters (changes in trait 2 DEPEND on values of trait 1: Maddison 1990)
#Must define the two models for comparison
plot.phylo(tree,show.tip.label = F)
tiplabels(pie = to.matrix(mydata[,3],sort(unique(mydata[,3]))),piecol=c("red", "black"),cex=.3, offset=0)
tiplabels(pie = to.matrix(mydata[,4],sort(unique(mydata[,4]))),piecol=c("green", "orange"),cex=.3, offset=0.2)
traits34<-cbind(row.names(mydata),mydata[,3:4])
trait34_fit_er  <-corHMM(phy = tree, data = traits34, rate.cat = 1, rate.mat = trait_model_er$rate.mat)
trait34_fit_dir <-corHMM(phy = tree, data = traits34, rate.cat = 1, rate.mat = trait_model_dir$rate.mat)
trait34_fit_er$loglik
trait34_fit_dir$loglik
## ----read_data----
library(geiger, warn.conflicts=F, quietly=T)
library(phytools, warn.conflicts=F, quietly=T)
library(corHMM, warn.conflicts=F, quietly=T)
tree<-read.tree("../data/tree.64.tre",tree.names=T)
mydata<-read.csv('../data/DiscreteData.csv', row.names=1, header=TRUE)
head(mydata) ##Head can be used to show the first few rows of a data frame
plot(tree)
tree
match(tree$tip.label,rownames(mydata))
match(tree$tip.label,sample(rownames(mydata)))
#Match data with tree
data.pruned<-treedata(phy=tree,data = mydata, warnings=FALSE)
tree<-data.pruned$phy
mydata<-data.pruned$data
## NOTE: see `plotTree.datamatrix` in phytools for other plotting option
plot.phylo(tree,show.tip.label = F) ## setting show.tip.label = F prevents the species names from appearing
## We make a colour key to denote which state gets which color
colorkey1 <- c('red','black') ##trait V1
colorkey2 <- c('green','orange') ##trait V3
names(colorkey1) <-c(0,1) ##Here we are saying that 0s get red and 1s get black
names(colorkey2) <-c(0,1) ##Here we are saying that 0s get green and 1s get orange
V1cols<-colorkey1[as.character(mydata[,1])] ##putting the trait values in as.character() is important!
V3cols<-colorkey2[as.character(mydata[,3])]
tiplabels(pch = 17,col = V1cols,cex=0.6)
tiplabels(pch = 19,col = V3cols,offset = 0.2,cex=0.6)
View(mydata)
plot.phylo(tree,show.tip.label = F)
tiplabels(pch = 17,col = V1cols)
#Set up data. corHMM is picky about how it wants the data formatted
trt1<-cbind(row.names(mydata),mydata[,1])
#Set up initial rate matrices
trait1_model_er <- getStateMat4Dat(trt1,"ER")  #equal transition rates
trait1_model_ard <- getStateMat4Dat(trt1,"ARD")  #All rates different
## ----single_trait_plot
trait1_model_er
trait1_model_ard
plotMKmodel(trait1_model_er$rate.mat,rate.cat = 1)
plotMKmodel(trait1_model_ard$rate.mat,rate.cat = 1)
#Fit models: TRAIT 1
trait1_fit_er <-corHMM(phy = tree, data = trt1, rate.cat = 1,
rate.mat = trait1_model_er$rate.mat)
trait1_fit_ard <-corHMM(phy = tree, data = trt1, rate.cat = 1,
rate.mat = trait1_model_ard$rate.mat)
##The estimated rates
trait1_fit_er$solution
trait1_fit_ard$solution
#compare models: logL and AIC
trait1_fit_er$loglik
trait1_fit_ard$loglik
##We can formally perform a likelihood ratio test of nested models by doing the following
summary_stat <- -2 * (trait1_fit_er$loglik - trait1_fit_ard$loglik) ## -2 * (model_constrained - model_full)
##This is our p-value
pchisq(summary_stat,df = 1,lower.tail=FALSE ) ##degrees of freedom is the difference in the number of parameters between the two models. In our case 2-1=1
trait1_fit_er$AIC
trait1_fit_ard$AIC
##first plot the data
V1cols<-colorkey1[as.character(mydata[,1])] ##putting the trait values in as.character() is important!
V2cols<-colorkey2[as.character(mydata[,2])]
plot(tree,show.tip.label = F)
tiplabels(pch = 17,col = V1cols)
tiplabels(pch = 19,col = V2cols,offset = 0.2)
##we set up the same format of data frame as before but now we include two traits: trait 1 and trait 2
trtset12<-cbind(row.names(mydata),mydata[,1:2])
trait12_model_er <- getStateMat4Dat(trtset12,"ER")  #equal transition rates
trait12_model_ard <- getStateMat4Dat(trtset12,"ARD")  #All rates different
trait12_model_er
trait12_model_ard
##coax the full transition matrix by having a data frame with all trait combinations
## First get all the unique states for the traits in question
states1<-unique(mydata[,1])
states2<-unique(mydata[,2])
traits12_expanded<-expand.grid('species',states1,states2) ##Having some string at the beginning is important! Our data needs the first column to be populated with names, this achieves that
##try making matrices again
trait12_model_er <- getStateMat4Dat(traits12_expanded,"ER")  #equal transition rates
trait12_model_ard <- getStateMat4Dat(traits12_expanded,"ARD")  #All rates different
##The full transition matrix. Hot dog!
trait12_model_er
trait12_model_ard
##coax the full transition matrix by having a data frame with all trait combinations
## First get all the unique states for the traits in question
states1<-unique(mydata[,1])
states2<-unique(mydata[,2])
traits12_expanded<-expand.grid('species',states1,states2) ##Having some string at the beginning is important! Our data needs the first column to be populated with names, this achieves that
##try making matrices again
trait12_model_er <- getStateMat4Dat(traits12_expanded,"ER")  #equal transition rates
trait12_model_ard <- getStateMat4Dat(traits12_expanded,"ARD")  #All rates different
##The full transition matrix. Hot dog!
trait12_model_er
trait12_model_ard
plotMKmodel(trait12_model_er$rate.mat,rate.cat = 1)
plotMKmodel(trait12_model_ard$rate.mat,rate.cat = 1)
## ----two_trait_pagel-----
tr1<-mydata[,1]; names(tr1)<-row.names(mydata)
tr2<-mydata[,2]; names(tr2)<-row.names(mydata)
pagel_fit <- fitPagel(tree,x=tr1,y=tr2)
pagel_fit
## ---- x_dep_y_fit ----
fitPagel(tree,x=tr1,y=tr2,dep.var = "x")
## ---- y_dep_x_fit ----
fitPagel(tree,x=tr1,y=tr2,dep.var = "y")
