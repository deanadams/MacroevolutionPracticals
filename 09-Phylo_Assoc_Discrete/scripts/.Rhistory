plot(tree.col,type="fan")
plot(tree.col)
plot(tree.col,type="fan",cex.legend=.75)
plot(tree.col,type="fan",cex.legend=.5)
plot(tree.col,type="fan",cex.legend=.75)
plot(tree.col,type="fan")
plot(tree.col,type="fan", cex.lab = 0.5)
plot(tree.col,type="fan", legend=0.5)
plot(tree.col,type="fan", leg.text = c("log(SVL)"))
plot(tree.col,type="fan", leg.text = "log(SVL)")
plot(tree.col,type="fan", fsize=c(0.6,1))
plot(tree.col,type="fan")
?plotTree
plotTree(tree.col,type="fan")
?plot
?ape
library(phytools)
library(geiger)
######Discrete Anc. State Estimation
## Read data & tree
tree<-read.tree("../data/anole.gp.tre",tree.names=T)
group<-read.csv('../data/anole.gp.csv', row.names=1)
gp<-as.factor(t(group)); names(gp)<-row.names(group)
#Plot
plot(tree,type="fan")
cols<-setNames(palette()[1:length(unique(gp))],sort(unique(gp)))
tiplabels(pie=model.matrix(~gp-1),piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
dev.off()
#Plot
plot(tree,type="fan")
cols<-setNames(palette()[1:length(unique(gp))],sort(unique(gp)))
tiplabels(pie=model.matrix(~gp-1),piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
library(castor)
gp.int<-as.numeric(gp); names(gp.int)<-names(gp)
anc.mp <- asr_max_parsimony(tree,gp.int)
#Plot
plot(tree, type="fan")
cols<-setNames(palette()[1:length(unique(gp.int))],sort(unique(gp.int)))
tiplabels(pie=model.matrix(~as.factor(gp.int)-1),piecol=cols,cex=0.3)
nodelabels(node=1:tree$Nnode+Ntip(tree),
pie=anc.mp$ancestral_likelihoods,piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
library(corHMM)
##Create the model for trait evolution
group_formatted<-cbind(row.names(group),group[,1]) ##put the data in a specific format because the function is picky
group_model_er <- getStateMat4Dat(group_formatted,"ER")  #equal transition rates
plotMKmodel(group_model_er$rate.mat,rate.cat = 1)
##Perform ancestral character estimation
anc.ML<-ace(x = group$x, phy = tree,
type = "discrete", method = 'ML',
model = group_model_er$rate.mat)
anc.ML ## we can see a lot of information just by calling our object
## We can see the probability of each state here, just the first few internal nodes will be shown
round(head(anc.ML$lik.anc),3)
# We can plot the ancestral character estimates with the nodelabels() function
colorkey <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2") ##A colorblind friendly color palette
names(colorkey) <- colnames(anc.ML$lik.anc) ##assign each character state a color
tip_cols<-colorkey[as.character(group$x)] ##putting the trait values in as.character() is important!
plot(tree,type="fan")
nodelabels(pie=anc.ML$lik.anc,piecol=colorkey,cex=0.5)
tiplabels(pch=19,col=tip_cols)
legend(x='bottomleft',legend = names(colorkey),fill=colorkey)
## ---- simmap ----
# simulate single stochastic character map using empirical Bayes method
gp<-setNames(group$x,rownames(group)) ##make.simmap needs a named vector for the data.
tree.smp1<-make.simmap(tree,gp,model=group_model_er$rate.mat)
plot(tree.smp1,colorkey,type="fan")  #one run.  Not overly useful.
#Must do many times
tree.smp<-make.simmap(tree,gp,model=group_model_er$rate.mat,nsim=100)
anc.smp<-summary(tree.smp,plot=FALSE)
plot(anc.smp, type="fan", fsize=0.8,ftype="i")
rm(list = ls())
#Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
## -----anc_est_cont-----
anc.cont.ML<-fastAnc(tree,cont_data$svl,vars=TRUE,CI=TRUE)
#anc.cont.ML #This would show us the estimate and 95% CI for each internal node
anc.cont.ML$ace  #ancestral estimates
#PLOT as color map
cont_data_vect<-setNames(cont_data$svl,rownames(cont_data)) ##contMap needs a named vector for the data.
tree.col<-contMap(tree,cont_data_vect,plot=FALSE)  #runs Anc. St. Est. on branches of tree
plot(tree.col,type="fan")
#using 'ace' function in APE
anc.cont.ML2<-ace(x=cont_data_vect,phy=tree, type="continuous", method="ML")
anc.cont.ML2$ace  #with APE
anc.cont.ML$ace   #with phytools: the same estimates
anc.cont.gls<-ace(x=cont_data_vect,phy=tree, corStruct = corBrownian(1, tree), method="GLS")  #same as ML  (see Schluter et al. 1997)
anc.cont.gls$ace   #GLS: SCP. the same
rm(list = ls())
## ---- known_nodes ----
tree<-pbtree(n=100,scale=1)
## simulate data with a trend
x<-fastBM(tree,internal=TRUE,mu=3)
phenogram(tree,x,ftype="off")
x.tip<-x[match(tree$tip.label,names(x))]
phenogram(tree,x.tip)  #traitgram under BM with no ancestral information
#estimate with no prior
a<-x[as.character(1:tree$Nnode+Ntip(tree))]
x<-x[tree$tip.label]
## let's see how bad we do if we ignore the trend
plot(a,fastAnc(tree,x),xlab="true values",
ylab="estimated states under BM")
lines(range(c(x,a)),range(c(x,a)),lty="dashed",col="red")
title("estimated without prior information")
## incorporate prior knowledge
pm<-setNames(c(1000,rep(0,tree$Nnode)),
c("sig2",1:tree$Nnode+length(tree$tip.label)))
## the root & two randomly chosen nodes
nn<-as.character(c(length(tree$tip.label)+1,
sample(2:tree$Nnode+length(tree$tip.label),2)))
pm[nn]<-a[as.character(nn)]
## prior variance
pv<-setNames(c(1000^2,rep(1000,length(pm)-1)),names(pm))
pv[as.character(nn)]<-1e-100
## run MCMC
mcmc<-anc.Bayes(tree,x,ngen=100000,
control=list(pr.mean=pm,pr.var=pv,
a=pm[as.character(length(tree$tip.label)+1)],
y=pm[as.character(2:tree$Nnode+length(tree$tip.label))]))
anc.est<-colMeans(mcmc$mcmc[201:1001,as.character(1:tree$Nnode+length(tree$tip.label))])
plot(a,anc.est,xlab="true values",
ylab="estimated states using informative prior")
lines(range(c(x,a)),range(c(x,a)),lty="dashed",col="red")
title("estimated using informative prior")
dev.off()
library(phytools)
library(geiger)
######Discrete Anc. State Estimation
## Read data & tree
tree<-read.tree("../data/anole.gp.tre",tree.names=T)
######Discrete Anc. State Estimation
## Read data & tree
tree<-read.tree("../data/anole.gp.tre",tree.names=T)
group<-read.csv('../data/anole.gp.csv', row.names=1)
gp<-as.factor(t(group)); names(gp)<-row.names(group)
View(group)
gp
#Plot
plot(tree,type="fan")
cols<-setNames(palette()[1:length(unique(gp))],sort(unique(gp)))
tiplabels(pie=model.matrix(~gp-1),piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
library(castor)
gp.int<-as.numeric(gp); names(gp.int)<-names(gp)
anc.mp <- asr_max_parsimony(tree,gp.int)
#Plot
plot(tree, type="fan")
cols<-setNames(palette()[1:length(unique(gp.int))],sort(unique(gp.int)))
tiplabels(pie=model.matrix(~as.factor(gp.int)-1),piecol=cols,cex=0.3)
nodelabels(node=1:tree$Nnode+Ntip(tree),
pie=anc.mp$ancestral_likelihoods,piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
library(corHMM)
##Create the model for trait evolution
group_formatted<-cbind(row.names(group),group[,1]) ##put the data in a specific format because the function is picky
group_model_er <- getStateMat4Dat(group_formatted,"ER")  #equal transition rates
plotMKmodel(group_model_er$rate.mat,rate.cat = 1)
##Perform ancestral character estimation
anc.ML<-ace(x = group$x, phy = tree,
type = "discrete", method = 'ML',
model = group_model_er$rate.mat)
anc.ML ## we can see a lot of information just by calling our object
## We can see the probability of each state here, just the first few internal nodes will be shown
round(head(anc.ML$lik.anc),3)
# We can plot the ancestral character estimates with the nodelabels() function
colorkey <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2") ##A colorblind friendly color palette
names(colorkey) <- colnames(anc.ML$lik.anc) ##assign each character state a color
tip_cols<-colorkey[as.character(group$x)] ##putting the trait values in as.character() is important!
plot(tree,type="fan")
nodelabels(pie=anc.ML$lik.anc,piecol=colorkey,cex=0.5)
tiplabels(pch=19,col=tip_cols)
legend(x='bottomleft',legend = names(colorkey),fill=colorkey)
## ---- simmap ----
# simulate single stochastic character map using empirical Bayes method
gp<-setNames(group$x,rownames(group)) ##make.simmap needs a named vector for the data.
tree.smp1<-make.simmap(tree,gp,model=group_model_er$rate.mat)
plot(tree.smp1,colorkey,type="fan")  #one run.  Not overly useful.
#Must do many times
tree.smp<-make.simmap(tree,gp,model=group_model_er$rate.mat,nsim=100)
anc.smp<-summary(tree.smp,plot=FALSE)
plot(anc.smp, type="fan", fsize=0.8,ftype="i")
rm(list = ls())
#Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
?fastAnc
## -----anc_est_cont-----
anc.cont.ML<-fastAnc(tree,cont_data$svl,vars=TRUE,CI=TRUE)
#anc.cont.ML #This would show us the estimate and 95% CI for each internal node
anc.cont.ML$ace  #ancestral estimates
#PLOT as color map
cont_data_vect<-setNames(cont_data$svl,rownames(cont_data)) ##contMap needs a named vector for the data.
tree.col<-contMap(tree,cont_data_vect,plot=FALSE)  #runs Anc. St. Est. on branches of tree
plot(tree.col,type="fan")
#using 'ace' function in APE
anc.cont.ML2<-ace(x=cont_data_vect,phy=tree, type="continuous", method="ML")
anc.cont.ML2$ace  #with APE
anc.cont.ML$ace   #with phytools: the same estimates
anc.cont.ML2$ace  #with APE
anc.cont.ML$ace   #with phytools: the same estimates
anc.cont.gls<-ace(x=cont_data_vect,phy=tree, corStruct = corBrownian(1, tree), method="GLS")  #same as ML  (see Schluter et al. 1997)
anc.cont.gls$ace   #GLS: SCP. the same
cbind(anc.cont.ML2$ace,anc.cont.gls$ace)
cbind(anc.cont.ML2$ace,anc.cont.gls$ace,anc.cont.ML)
cbind(anc.cont.ML2$ace,anc.cont.gls$ace,anc.cont.ML$ace)
## ---- known_nodes ----
tree<-pbtree(n=100,scale=1)
## simulate data with a trend
x<-fastBM(tree,internal=TRUE,mu=3)
phenogram(tree,x,ftype="off")
x.tip<-x[match(tree$tip.label,names(x))]
phenogram(tree,x.tip)  #traitgram under BM with no ancestral information
#estimate with no prior
a<-x[as.character(1:tree$Nnode+Ntip(tree))]
x<-x[tree$tip.label]
## let's see how bad we do if we ignore the trend
plot(a,fastAnc(tree,x),xlab="true values",
ylab="estimated states under BM")
lines(range(c(x,a)),range(c(x,a)),lty="dashed",col="red")
title("estimated without prior information")
## incorporate prior knowledge
pm<-setNames(c(1000,rep(0,tree$Nnode)),
c("sig2",1:tree$Nnode+length(tree$tip.label)))
## the root & two randomly chosen nodes
nn<-as.character(c(length(tree$tip.label)+1,
sample(2:tree$Nnode+length(tree$tip.label),2)))
pm[nn]<-a[as.character(nn)]
## prior variance
pv<-setNames(c(1000^2,rep(1000,length(pm)-1)),names(pm))
pv[as.character(nn)]<-1e-100
## run MCMC
mcmc<-anc.Bayes(tree,x,ngen=100000,
control=list(pr.mean=pm,pr.var=pv,
a=pm[as.character(length(tree$tip.label)+1)],
y=pm[as.character(2:tree$Nnode+length(tree$tip.label))]))
anc.est<-colMeans(mcmc$mcmc[201:1001,as.character(1:tree$Nnode+length(tree$tip.label))])
plot(a,anc.est,xlab="true values",
ylab="estimated states using informative prior")
lines(range(c(x,a)),range(c(x,a)),lty="dashed",col="red")
title("estimated using informative prior")
#using 'ace' function in APE
anc.cont.ML2<-ace(x=cont_data$svl,phy=tree, type="continuous", method="ML")
anc.cont.ML2$ace  #with APE
#anc.cont.ML #This would show us the estimate and 95% CI for each internal node
anc.cont.ML$ace  #ancestral estimates
cont_data_vect
cont_data$svl
anc.cont.ML<-fastAnc(tree,cont_data_vect,vars=TRUE,CI=TRUE)
rm(list = ls())
#Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
cont_data
## -----anc_est_cont-----
anc.cont.ML<-fastAnc(tree,cont_data,vars=TRUE,CI=TRUE)
matrix(cont_data)
matrix(cont_data[,1])
cont_data_vect<-setNames(cont_data$svl,rownames(cont_data)) ##contMap needs a named vector for the data.
cont_data_vect
length(cont_data_vect)
## -----anc_est_cont-----
anc.cont.ML<-fastAnc(tree,cont_data_vect,vars=TRUE,CI=TRUE)
#anc.cont.ML #This would show us the estimate and 95% CI for each internal node
anc.cont.ML$ace  #ancestral estimates
#PLOT as color map
cont_data_vect<-setNames(cont_data$svl,rownames(cont_data)) ##contMap needs a named vector for the data.
tree.col<-contMap(tree,cont_data_vect,plot=FALSE)  #runs Anc. St. Est. on branches of tree
plot(tree.col,type="fan")
#using 'ace' function in APE
anc.cont.ML2<-ace(x=cont_data_vect,phy=tree, type="continuous", method="ML")
anc.cont.ML2$ace  #with APE
anc.cont.ML$ace   #with phytools: the same estimates
library(phytools)
library(geiger)
######Discrete Anc. State Estimation
## Read data & tree
tree<-read.tree("../data/anole.gp.tre",tree.names=T)
group<-read.csv('../data/anole.gp.csv', row.names=1)
gp<-as.factor(t(group)); names(gp)<-row.names(group)
#Plot
plot(tree,type="fan")
cols<-setNames(palette()[1:length(unique(gp))],sort(unique(gp)))
tiplabels(pie=model.matrix(~gp-1),piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
library(castor)
gp.int<-as.numeric(gp); names(gp.int)<-names(gp)
anc.mp <- asr_max_parsimony(tree,gp.int)
#Plot
plot(tree, type="fan")
cols<-setNames(palette()[1:length(unique(gp.int))],sort(unique(gp.int)))
tiplabels(pie=model.matrix(~as.factor(gp.int)-1),piecol=cols,cex=0.3)
nodelabels(node=1:tree$Nnode+Ntip(tree),
pie=anc.mp$ancestral_likelihoods,piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
library(corHMM)
##Create the model for trait evolution
group_formatted<-cbind(row.names(group),group[,1]) ##put the data in a specific format because the function is picky
group_model_er <- getStateMat4Dat(group_formatted,"ER")  #equal transition rates
plotMKmodel(group_model_er$rate.mat,rate.cat = 1)
##Create the model for trait evolution
group_formatted<-cbind(row.names(group),group[,1]) ##put the data in a specific format because the function is picky
group_model_er <- getStateMat4Dat(group_formatted,"ER")  #equal transition rates
plotMKmodel(group_model_er$rate.mat,rate.cat = 1)
##Perform ancestral character estimation
anc.ML<-ace(x = group$x, phy = tree,
type = "discrete", method = 'ML',
model = group_model_er$rate.mat)
anc.ML ## we can see a lot of information just by calling our object
## We can see the probability of each state here, just the first few internal nodes will be shown
round(head(anc.ML$lik.anc),3)
# We can plot the ancestral character estimates with the nodelabels() function
colorkey <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2") ##A colorblind friendly color palette
names(colorkey) <- colnames(anc.ML$lik.anc) ##assign each character state a color
tip_cols<-colorkey[as.character(group$x)] ##putting the trait values in as.character() is important!
plot(tree,type="fan")
nodelabels(pie=anc.ML$lik.anc,piecol=colorkey,cex=0.5)
tiplabels(pch=19,col=tip_cols)
legend(x='bottomleft',legend = names(colorkey),fill=colorkey)
## ---- simmap ----
# simulate single stochastic character map using empirical Bayes method
gp<-setNames(group$x,rownames(group)) ##make.simmap needs a named vector for the data.
tree.smp1<-make.simmap(tree,gp,model=group_model_er$rate.mat)
plot(tree.smp1,colorkey,type="fan")  #one run.  Not overly useful.
#Must do many times
tree.smp<-make.simmap(tree,gp,model=group_model_er$rate.mat,nsim=100)
anc.smp<-summary(tree.smp,plot=FALSE)
plot(anc.smp, type="fan", fsize=0.8,ftype="i")
rm(list = ls())
#Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
cont_data_vect<-setNames(cont_data$svl,rownames(cont_data)) ##contMap needs a named vector for the data.
## -----anc_est_cont-----
anc.cont.ML<-fastAnc(tree,cont_data_vect,vars=TRUE,CI=TRUE)
#anc.cont.ML #This would show us the estimate and 95% CI for each internal node
anc.cont.ML$ace  #ancestral estimates
#PLOT as color map
tree.col<-contMap(tree,cont_data_vect,plot=FALSE)  #runs Anc. St. Est. on branches of tree
plot(tree.col,type="fan")
#using 'ace' function in APE
anc.cont.ML2<-ace(x=cont_data_vect,phy=tree, type="continuous", method="ML")
anc.cont.ML2$ace  #with APE
anc.cont.ML$ace   #with phytools: the same estimates
anc.cont.gls<-ace(x=cont_data_vect,phy=tree, corStruct = corBrownian(1, tree), method="GLS")  #same as ML  (see Schluter et al. 1997)
anc.cont.gls$ace   #GLS: SCP. the same
rm(list = ls())
## ---- known_nodes ----
tree<-pbtree(n=100,scale=1)
## simulate data with a trend
x<-fastBM(tree,internal=TRUE,mu=3)
phenogram(tree,x,ftype="off")
x.tip<-x[match(tree$tip.label,names(x))]
phenogram(tree,x.tip)  #traitgram under BM with no ancestral information
#estimate with no prior
a<-x[as.character(1:tree$Nnode+Ntip(tree))]
x<-x[tree$tip.label]
## let's see how bad we do if we ignore the trend
plot(a,fastAnc(tree,x),xlab="true values",
ylab="estimated states under BM")
lines(range(c(x,a)),range(c(x,a)),lty="dashed",col="red")
title("estimated without prior information")
## incorporate prior knowledge
pm<-setNames(c(1000,rep(0,tree$Nnode)),
c("sig2",1:tree$Nnode+length(tree$tip.label)))
## the root & two randomly chosen nodes
nn<-as.character(c(length(tree$tip.label)+1,
sample(2:tree$Nnode+length(tree$tip.label),2)))
pm[nn]<-a[as.character(nn)]
## prior variance
pv<-setNames(c(1000^2,rep(1000,length(pm)-1)),names(pm))
pv[as.character(nn)]<-1e-100
## run MCMC
mcmc<-anc.Bayes(tree,x,ngen=100000,
control=list(pr.mean=pm,pr.var=pv,
a=pm[as.character(length(tree$tip.label)+1)],
y=pm[as.character(2:tree$Nnode+length(tree$tip.label))]))
anc.est<-colMeans(mcmc$mcmc[201:1001,as.character(1:tree$Nnode+length(tree$tip.label))])
plot(a,anc.est,xlab="true values",
ylab="estimated states using informative prior")
lines(range(c(x,a)),range(c(x,a)),lty="dashed",col="red")
title("estimated using informative prior")
#Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
cont_data_vect<-setNames(cont_data$svl,rownames(cont_data)) ##contMap needs a named vector for the data.
cont_data
SVL<-read.csv('../data/anole.svl.csv', row.names=1)
#Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
SVL<-read.csv('../data/anole.svl.csv', row.names=1)
phylosig(tree,SVL, method = "K")
dim(SVL)
SVL
tree$tip.label
phylosig(tree,SVL)
tree$edge.length
#Read Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
SVL<-read.csv('../data/anole.svl.csv', row.names=1)
geomorph:::physignal(SVL, tree)
geomorph:::physignal.z(SVL, tree)
#Read Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
#Read Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
setwd("C:/DeanData/Teaching/Biol-465-EEOB 565-Macroevolution/MacroevolutionPracticals/08-Ancestral_States_PhySignal/scripts")
#Read Data from Mahler et al. 2010. Evolution
tree<-read.tree("../data/anole.svl.tre",tree.names=T)
cont_data<-read.csv('../data/anole.svl.csv', row.names=1)
SVL<-read.csv('../data/anole.svl.csv', row.names=1)
SVL$svl
SVL<-setNames(SVL$svl,rownames(SVL)) ##contMap needs a named vector for the data.
SVL
# Run phylogenetic signal
phylosig(tree,SVL)
geomorph:::physignal(SVL, tree)
physignal(SVL, tree)
library(geomorph)
physignal(SVL, tree) # same in geomorph
# Run phylogenetic signal
phylosig(tree,SVL,test = "K")
?phylosig
# Run phylogenetic signal
phylosig(tree,SVL,method = "K", test = TRUE)
physignal(SVL, tree) # same in geomorph
geomorph:::physignal.z(SVL, tree)
# Run phylogenetic signal
phylosig(tree,SVL,method = "lambda", test = TRUE)
setwd("C:/DeanData/Teaching/Biol-465-EEOB 565-Macroevolution/Josh-Additional-PracticalMaterials/09-Phylo_Assoc_Discrete/scripts")
## ----read_data----
library(geiger, warn.conflicts=F, quietly=T)
library(phytools, warn.conflicts=F, quietly=T)
library(corHMM, warn.conflicts=F, quietly=T)
tree<-read.tree("../data/tree.64.tre",tree.names=T)
mydata<-read.csv('../data/DiscreteData.csv', stringsAsFactors = TRUE, row.names=1, header=TRUE)
head(mydata) ##Head can be used to show the first few rows of a data frame
mydata$V1
mydata<-read.csv('../data/DiscreteData.csv', row.names=1, header=TRUE)
plotTree.datamatrix
data <- mydata[,1:2]
data
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
data <- mydata[,1:2]; data[,1] <- as.factor(data[,1]); data[,2] <- as.factor(data[,2])
data
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
data <- mydata[,c(1,3)]; data[,1] <- as.factor(data[,1]); data[,2] <- as.factor(data[,2])
data
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
leg <- legend(x = leg$rect$left + 4.7, y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
leg <- legend(x = "topright", names(object$colors$V1),
cex = 0.7, pch = 22, pt.bg = object$colors$V1,
pt.cex = 1.5, bty = "n", title = "V1")
leg <- legend(x = leg$rect$left + 4.7, y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
leg <- legend(x = "topright", names(object$colors$V1),
cex = 0.7, pch = 22, pt.bg = object$colors$V1,
pt.cex = 1.5, bty = "n", title = "V1")
leg <- legend(x = leg$rect$left + 2.7, y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
leg <- legend(x = leg$rect$left, y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
leg <- legend(x = "topright", y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
leg$rect$left
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
leg <- legend(x = "topright"-2, names(object$colors$V1),
cex = 0.7, pch = 22, pt.bg = object$colors$V1,
pt.cex = 1.5, bty = "n", title = "V1")
leg <- legend(x = "topright", names(object$colors$V1),
cex = 0.7, pch = 22, pt.bg = object$colors$V1,
pt.cex = 1.5, bty = "n", title = "V1")
dev.off()
object <- plotTree.datamatrix(tree, data, fsize = 0.5, yexp = 1,
header = FALSE, xexp = 1.45, palettes = c("YlOrRd","PuBuGn") )
leg <- legend(x = "topright", names(object$colors$V1),
cex = 0.7, pch = 22, pt.bg = object$colors$V1,
pt.cex = 1.5, bty = "n", title = "V1")
leg <- legend(x = leg$rect$left+ 4.7, y = leg$rect$top-leg$rect$h,
names(object$colors$V3), cex = 0.7,
pch = 22, pt.bg = object$colors$V3,
pt.cex = 1.5, bty = "n", title = "V3")
leg$rect$top
leg$rect$h
